AWSTemplateFormatVersion: '2010-09-09'
Description: Deploys Inventory Management App on EC2 using RDS PostgreSQL Database for backend

Resources:
  AWSProjectEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: "<REPLACE_WITH_AMI_ID>" # Ensure this is a valid AMI ID for your region
      KeyName: "<REPLACE_WITH_YOUR_KEY_PAIR_NAME>" # Update this with your actual key pair name
      AvailabilityZone: "<REPLACE_WITH_AZ>" # Specify your preferred availability zone
      SecurityGroupIds:
        - "<REPLACE_WITH_SECURITY_GROUP_ID>" # Replace with your actual security group ID
      UserData: !Base64 |
        #!/bin/bash
        echo "Starting user data script..." > /var/log/user-data.log
        sudo yum update -y >> /var/log/user-data.log 2>&1
        sudo yum install -y docker >> /var/log/user-data.log 2>&1
        sudo systemctl start docker >> /var/log/user-data.log 2>&1
        sudo systemctl enable docker >> /var/log/user-data.log 2>&1
        sudo usermod -aG docker ec2-user >> /var/log/user-data.log 2>&1

        # Wait for instance to be fully initialized
        sleep 60

        # Fetch DB credentials from SSM Parameter Store
        DB_USER=$(aws ssm get-parameter --name "<REPLACE_WITH_SSM_PARAMETER_DB_USERNAME>" --with-decryption --query "Parameter.Value" --output text)
        DB_PASS=$(aws ssm get-parameter --name "<REPLACE_WITH_SSM_PARAMETER_DB_PASSWORD>" --with-decryption --query "Parameter.Value" --output text)

        # Get the RDS instance endpoint dynamically
        DB_HOST=$(aws rds describe-db-instances --query "DBInstances[?DBInstanceIdentifier=='<REPLACE_WITH_RDS_INSTANCE_IDENTIFIER>'].Endpoint.Address" --output text)

        # Login to Amazon ECR
        $(aws ecr get-login-password --region <REPLACE_WITH_AWS_REGION> | docker login --username AWS --password-stdin <REPLACE_WITH_ECR_REGISTRY>) >> /var/log/user-data.log 2>&1

        # Pull the image from ECR
        docker pull <REPLACE_WITH_ECR_REPOSITORY>:latest >> /var/log/user-data.log 2>&1
        
        # Run the Docker container
        docker run -d -p 80:80 \
         -e DB_Name=<REPLACE_WITH_DB_NAME> \
         -e DB_User=$DB_USER \
         -e DB_Pass=$DB_PASS \
         -e DB_HOST=$DB_HOST \
         <REPLACE_WITH_ECR_REPOSITORY>:latest >> /var/log/user-data.log 2>&1

  AWSProjectSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP and SSH
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  AWSProjectPartManagDB:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceClass: db.t3.micro
      Engine: postgres
      MasterUsername: '{{resolve:ssm:<REPLACE_WITH_SSM_PARAMETER_DB_USERNAME>}}'
      MasterUserPassword: '{{resolve:ssm-secure:<REPLACE_WITH_SSM_PARAMETER_DB_PASSWORD>}}'
      AllocatedStorage: 20
      PubliclyAccessible: false
      AvailabilityZone: "<REPLACE_WITH_AZ>" # Specify your preferred AZ
      DBInstanceIdentifier: "<REPLACE_WITH_DB_INSTANCE_IDENTIFIER>"
